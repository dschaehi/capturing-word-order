
Capturing Word Order in Averaging Based Sentence Embeddings
** Installation
*** Requirements
- nltk
- tqdm
*** Prepare Wikipedia Corpus
#+begin_src sh
  # Update and initialize submodules
  git submodule update
  git submodule init

  # Create a folder for raw data
  mkdir -p data/raw

  # Download an archived Wikipedia dump (alternatively, you can download
  # a recent dump from https://dumps.wikimedia.org/enwiki.) and save it
  # as data/raw/wiki.bz2.
  wget https://archive.org/download/enwiki-20190201/enwiki-20190201-pages-articles-multistream.xml.bz2 \
       -P data/raw/wiki.bz2

  # Create a folder for interim data
  mkdir -p data/interim

  # Extract text from the wikipedia dump as data/interim/wiki.json.
  # Replace --process 32 with --process n where n is the number of
  # available CPU cores.
  cd src/data/wikiextractor
  python WikiExtractor.py --process 32 --json -co ../../../data/interim/wiki ../../../data/raw/wiki.bz2

  # Combine the articles as one json file.
  cd ../../data/interim
  find wiki -name '*bz2' -exec bunzip2 -k -c {} \; > wiki.json
#+end_src
*** Generate Tokenized Wikipedia Sentences
#+begin_src sh
  # Download  nltk 'punkt' package that is necesseray for tokenization
  python -c "import nltk; nltk.download('punkt')"

  # Create a folder for processed data
  mkdir data/processed

  # Generate tokenized 1 million wikipedia sentences. The output is stored in processed data folder.
  cd src/data/
  python tokenize_wiki.py
  # Generate tokenized 1 million wikipedia sentences of length <= 25.
  python tokenize_wiki.py --max_len 25
#+end_src
*** Download fastText word vectors
#+begin_src sh
  wget https://dl.fbaipublicfiles.com/fasttext/vectors-english/crawl-300d-2M.vec.zip -P data/raw/
#+end_src

